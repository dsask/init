snippet npdb "Nose tools pdb" b
from nose.tools import set_trace; set_trace()
endsnippet

snippet oneoff "One off script" b
from app import create_app
from config import DebugConfig

app = create_app(DebugConfig)
with app.app_context():
    ${1}
endsnippet

global !p
def CamelCase(text):
    parts = [x.title() for x in text.split('_')]
    return ''.join(parts)
endglobal

snippet acct "boilerplate for accounting rules" 
from sqlalchemy import (
    Column, String, Integer, Numeric, ForeignKey, Float
)
from flask.ext.babel import gettext as _

from app.accounting.events import query_final_events
from app.accounting.models import AcctEvent, EventType, AcctAccount
from app.accounting.registry import posting_rule, CREDIT_FACILITY, EQUITY_CAPITAL
from app.accounting.events import EventProcessor
from app.accounting.liwwa_accounts import LiwwaPropAccount

class Acct`!p snip.rv = CamelCase(t[1])`Event(AcctEvent):
    __mapper_args__ = {
        'polymorphic_identity' : EventType.`!p snip.rv = t[1]`
    }

    id = Column(Integer, ForeignKey("accounting_events.id"), primary_key = True)
    ${2}

    @property
    def statement_description(self):
        return _("${3}")


@posting_rule(EventType.${1})
class Process`!p snip.rv = CamelCase(t[1])`(object):
    def process(self, event):
        with EventProcessor(event) as p:
	    ${4}
endsnippet

snippet model "boilerplate for db models"
from sqlalchemy import Column, String, Integer

from app.database import db
from app.util.mixins import CreateUpdateDate
from app.util.new_enum import LiwwaEnum, LiwwaEnumType, LiwwaEnumIntegerType

class ${1}(db.Model, CreateUpdateDate):
    ${2} = Column(${3})
endsnippet
